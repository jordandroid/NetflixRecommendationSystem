[
{
  "pk": 1015, 
  "model": "desktop.document2", 
  "fields": {
    "search": "import pyspark\r\nfrom pyspark.mllib.recommendation import ALS, Rating,MatrixFactorizationModel\r\nfrom pyspark.ml.feature import VectorAssembler\r\nfrom pyspark.sql.functions import col\r\nfrom pyspark.ml.evaluation import RegressionEvaluator\r\nfrom pyspark.storagelevel import StorageLevel\r\nfrom sklearn.neighbors import NearestNeighbors\r\nfrom pyspark.mllib.regression import LabeledPoint\r\nfrom pyspark.sql.types import DoubleType\r\nimport numpy as np\r\nimport os\r\nimport subprocess\r\nimport pickle\r\n\r\n\r\nspark = pyspark.sql.HiveContext(sc)\r\nsc.setCheckpointDir('checkpoint/')", 
    "uuid": "cf368cf7-1642-cf81-5673-6bdc62feffd1", 
    "extra": "", 
    "type": "notebook", 
    "description": "", 
    "is_history": false, 
    "parent_directory": [
      "619cf66d-649d-41f4-b466-4d64b351a3d7", 
      1, 
      false
    ], 
    "is_managed": false, 
    "last_modified": "2021-06-23T05:55:41", 
    "version": 1, 
    "owner": [
      "cloudera"
    ], 
    "dependencies": [], 
    "data": "{\"loadingHistory\": true, \"schedulerViewModel\": null, \"retryModalCancel\": null, \"schedulerViewModelIsLoaded\": false, \"historyTotalPages\": 1, \"unloaded\": false, \"id\": 1015, \"retryModalConfirm\": null, \"uuid\": \"cf368cf7-1642-cf81-5673-6bdc62feffd1\", \"onSuccessUrl\": null, \"historyFilterVisible\": false, \"snippets\": [{\"wasBatchExecuted\": false, \"chartLimits\": [5, 10, 25, 50, 100], \"associatedDocumentLoading\": true, \"isReady\": true, \"statement_raw\": \"import pyspark\\r\\nfrom pyspark.mllib.recommendation import ALS, Rating,MatrixFactorizationModel\\r\\nfrom pyspark.ml.feature import VectorAssembler\\r\\nfrom pyspark.sql.functions import col\\r\\nfrom pyspark.ml.evaluation import RegressionEvaluator\\r\\nfrom pyspark.storagelevel import StorageLevel\\r\\nfrom sklearn.neighbors import NearestNeighbors\\r\\nfrom pyspark.mllib.regression import LabeledPoint\\r\\nfrom pyspark.sql.types import DoubleType\\r\\nimport numpy as np\\r\\nimport os\\r\\nimport subprocess\\r\\nimport pickle\\r\\n\\r\\n\\r\\nspark = pyspark.sql.HiveContext(sc)\\r\\nsc.setCheckpointDir('checkpoint/')\", \"statusForButtons\": \"executed\", \"showLogs\": false, \"variableNames\": [], \"associatedDocumentUuid\": null, \"compatibilitySourcePlatform\": \"pyspark\", \"chartLimit\": null, \"progress\": 0, \"chartType\": \"bars\", \"isFetchingData\": false, \"name\": \"\", \"statementTypes\": [\"text\", \"file\", \"document\"], \"is_redacted\": false, \"currentQueryTab\": \"savedQueries\", \"chartScope\": \"world\", \"result\": {\"statement_id\": 0, \"isMetaFilterVisible\": false, \"meta\": [], \"logLines\": 0, \"id\": \"96355c2f-ad4c-f441-af09-43bb4c7ee84b\", \"logs\": \"\", \"statements_count\": 1, \"rows\": \"1\", \"hasSomeResults\": false, \"filteredMetaChecked\": true, \"hasMore\": false, \"filteredMeta\": [], \"type\": \"text\", \"handle\": {\"has_result_set\": true, \"id\": 0}, \"metaFilter\": \"\", \"explanation\": \"\", \"statement_range\": {\"start\": {\"column\": 0, \"row\": 0}, \"end\": {\"column\": 0, \"row\": 0}}, \"startTime\": \"2021-06-23T07:40:43.978Z\", \"data\": [], \"previous_statement_hash\": null, \"executionTime\": 4181, \"fetchedOnce\": false, \"hasResultset\": true, \"endTime\": \"2021-06-23T07:40:48.159Z\"}, \"errors\": [], \"chartMapHeat\": null, \"compatibilitySourcePlatforms\": [{\"name\": \"Teradata\", \"value\": \"teradata\"}, {\"name\": \"Oracle\", \"value\": \"oracle\"}, {\"name\": \"Netezza\", \"value\": \"netezza\"}, {\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}, {\"name\": \"DB2\", \"value\": \"db2\"}, {\"name\": \"Greenplum\", \"value\": \"greenplum\"}, {\"name\": \"MySQL\", \"value\": \"mysql\"}, {\"name\": \"PostgreSQL\", \"value\": \"postgresql\"}, {\"name\": \"Informix\", \"value\": \"informix\"}, {\"name\": \"SQL Server\", \"value\": \"sqlserver\"}, {\"name\": \"Sybase\", \"value\": \"sybase\"}, {\"name\": \"Access\", \"value\": \"access\"}, {\"name\": \"Firebird\", \"value\": \"firebird\"}, {\"name\": \"ANSISQL\", \"value\": \"ansisql\"}, {\"name\": \"Generic\", \"value\": \"generic\"}], \"aceErrorsHolder\": [], \"showOptimizer\": false, \"compatibilityTargetPlatform\": \"pyspark\", \"jobs\": [], \"statementType\": \"text\", \"variableValues\": {}, \"isCanceling\": false, \"queriesTotalPages\": 0, \"formatEnabled\": true, \"properties\": {}, \"aceErrors\": [], \"externalStatementLoaded\": false, \"chartScatterSize\": null, \"chartYSingle\": null, \"suggestion\": \"\", \"statementPath\": \"\", \"showLongOperationWarning\": false, \"chartX\": \"Header\", \"lastExecuted\": 1624434043971, \"variables\": [], \"showChart\": false, \"isResultSettingsVisible\": false, \"showGrid\": true, \"pinnedContextTabs\": [], \"viewSettings\": {\"placeHolder\": \"Example: 1 + 1, or press CTRL + space\"}, \"statementsList\": [\"import pyspark\\r\\nfrom pyspark.mllib.recommendation import ALS, Rating,MatrixFactorizationModel\\r\\nfrom pyspark.ml.feature import VectorAssembler\\r\\nfrom pyspark.sql.functions import col\\r\\nfrom pyspark.ml.evaluation import RegressionEvaluator\\r\\nfrom pyspark.storagelevel import StorageLevel\\r\\nfrom sklearn.neighbors import NearestNeighbors\\r\\nfrom pyspark.mllib.regression import LabeledPoint\\r\\nfrom pyspark.sql.types import DoubleType\\r\\nimport numpy as np\\r\\nimport os\\r\\nimport subprocess\\r\\nimport pickle\\r\\n\\r\\n\\r\\nspark = pyspark.sql.HiveContext(sc)\\r\\nsc.setCheckpointDir('checkpoint/')\"], \"lastAceSelectionRowOffset\": 0, \"executingBlockingOperation\": null, \"errorsKlass\": \"results pyspark alert alert-error\", \"statement\": \"import pyspark\\r\\nfrom pyspark.mllib.recommendation import ALS, Rating,MatrixFactorizationModel\\r\\nfrom pyspark.ml.feature import VectorAssembler\\r\\nfrom pyspark.sql.functions import col\\r\\nfrom pyspark.ml.evaluation import RegressionEvaluator\\r\\nfrom pyspark.storagelevel import StorageLevel\\r\\nfrom sklearn.neighbors import NearestNeighbors\\r\\nfrom pyspark.mllib.regression import LabeledPoint\\r\\nfrom pyspark.sql.types import DoubleType\\r\\nimport numpy as np\\r\\nimport os\\r\\nimport subprocess\\r\\nimport pickle\\r\\n\\r\\n\\r\\nspark = pyspark.sql.HiveContext(sc)\\r\\nsc.setCheckpointDir('checkpoint/')\", \"type\": \"pyspark\", \"chartSorting\": \"none\", \"previousChartOptions\": {\"chartTimelineType\": \"bar\", \"chartSorting\": \"none\", \"chartLimit\": null, \"chartMapHeat\": null, \"chartX\": \"Header\", \"chartMapType\": \"marker\", \"chartYMulti\": [], \"chartScatterSize\": null, \"chartScope\": \"world\", \"chartMapLabel\": null, \"chartScatterGroup\": null, \"chartYSingle\": null, \"chartXPivot\": null}, \"aceWarningsHolder\": [], \"resultsKlass\": \"results pyspark\", \"chartTimelineType\": \"bar\", \"compatibilityTargetPlatforms\": [{\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}], \"topRisk\": null, \"hasCurlyBracketParameters\": true, \"chartScatterGroup\": null, \"settingsVisible\": false, \"queriesFilterVisible\": false, \"aceWarnings\": [], \"compatibilityCheckRunning\": false, \"isLoading\": true, \"loadingQueries\": false, \"hasDataForChart\": false, \"id\": \"f3b6608f-a7d0-7a68-d454-4e36b9aa03a9\", \"aceSize\": 100, \"chartData\": [], \"queriesHasErrors\": false, \"chartMapLabel\": null, \"status\": \"loading\", \"chartMapType\": \"marker\", \"queriesFilter\": \"\", \"queriesCurrentPage\": 1, \"isBatchable\": false, \"chartYMulti\": [], \"dbSelectionVisible\": false, \"database\": \"default\", \"hasSuggestion\": null, \"chartXPivot\": null, \"checkStatusTimeout\": null}, {\"wasBatchExecuted\": false, \"chartLimits\": [5, 10, 25, 50, 100], \"associatedDocumentLoading\": true, \"isReady\": true, \"statement_raw\": \"def run_cmd(args_list):\\n        \\\"\\\"\\\"\\n        run linux commands\\n        \\\"\\\"\\\"\\n        # import subprocess\\n        print('Running system command: {0}'.format(' '.join(args_list)))\\n        proc = subprocess.Popen(args_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\n        s_output, s_err = proc.communicate()\\n        s_return =  proc.returncode\\n        return s_return, s_output, s_err \\n\\ndef load_data():\\n    df = spark.sql(\\\"SELECT * FROM default.netflix_trainwithouttest_parquet LIMIT 10000000\\\") #\\n    df= df#.repartition(20).persist(StorageLevel.DISK_ONLY)\\n    df = df.select(col('user_id').cast('int'),col('movied_id').cast('int'),col('rating').cast('Double'))\\n    #train, test = df.randomSplit([0.7, 0.3], 42)\\n    train = df\\n    \\n    dfT = spark.sql(\\\"SELECT * FROM default.netflix_test_parquet\\\")\\n    dfT = dfT.select(col('user_id').cast('int'),col('movied_id').cast('int'),col('rating').cast('Double'))\\n    test = dfT\\n    \\n    df2 = spark.sql(\\\"SELECT id,total_number_of_movie,average_rating,best_mark,worst_mark,average_movie_monthly FROM default.user_parquet\\\")\\n    df2 = df2.fillna(0, subset=[\\\"id\\\",\\\"total_number_of_movie\\\",\\\"average_rating\\\",\\\"best_mark\\\",\\\"worst_mark\\\",\\\"average_movie_monthly\\\"])\\n    assembler = VectorAssembler(inputCols=[\\\"total_number_of_movie\\\",\\\"average_rating\\\",\\\"best_mark\\\",\\\"worst_mark\\\",\\\"average_movie_monthly\\\"],outputCol=\\\"features\\\")\\n    transformed = assembler.transform(df2)\\n    df3 = transformed.withColumn(\\\"id\\\", transformed[\\\"id\\\"].cast(\\\"double\\\"))\\n    df_userfeatures = df3.select(col(\\\"id\\\"),col(\\\"features\\\"))\\n    return train, test, df_userfeatures\\n    \\ndef train_als(trainset_df, rank=10, numIt=10,alphaV=0.065):\\n    X_train_rdd = trainset_df.rdd.repartition(4)#\\n    return ALS.train(X_train_rdd,rank,numIt,alphaV)\\n\\ndef save_als_model(als, srcPath=\\\"/home/cloudera/tmp/myCollaborativeFilter\\\"):\\n    # Prepare a FileSystem manager\\n    fs = (sc._jvm.org.apache.hadoop.fs.FileSystem.get(sc._jsc.hadoopConfiguration()))\\n    run_cmd(['hdfs', 'dfs', '-rm', '-r', srcPath])\\n    als.save(sc, \\\"/home/cloudera/tmp/myCollaborativeFilter\\\")\\n\\ndef load_als_model(srcPath=\\\"/home/cloudera/tmp/myCollaborativeFilter\\\"):\\n    return MatrixFactorizationModel.load(sc, srcPath)\\n\\ndef RMSE_ALS(als, test_df):\\n    testdata = test_df.select(col('user_id'),col('movied_id')).rdd\\n    predictions = als.predictAll(testdata).map(lambda r: ((r[0], r[1]), r[2]))\\n    ratesAndPreds = test_df.rdd.map(lambda r: ((r[0], r[1]), r[2])).join(predictions)\\n    MSE = ratesAndPreds.map(lambda r: (r[1][0] - r[1][1])**2).mean()\\n    print(\\\"Root Mean Squared Error = \\\" + str(np.sqrt(MSE)))\\n\\ndef train_knn(df_userfeatures, numberNeighboor=100):\\n    res = df_userfeatures.select(col(\\\"features\\\"))\\n    res = res.repartition(4)\\n    collected_res = res.collect()\\n\\n    collected_res = np.asarray(collected_res).transpose(0,1,2).reshape(-1,5)\\n    #collected_res = collected_res / collected_res.max(axis=0)\\n    knn = NearestNeighbors(numberNeighboor).fit(collected_res)\\n    #bc_knn = sc.broadcast(knn)\\n    #results = res.map(lambda x: bc_knn.value.kneighbors(x))\\n    return knn\\n\\ndef save_knn_model(knn,filename = '/home/cloudera/tmp/finalized_model.sav'):\\n    pickle.dump(knn, open(filename, 'wb'))\\n    \\ndef load_knn_model(filename = '/home/cloudera/tmp/finalized_model.sav'):\\n    # load the model from disk\\n    return pickle.load(open(filename, 'rb'))\\n    \\ndef recommendMoviesToUser(user_id, df_userfeatures, df_all, maxNumberOfElementToRecomend=100,maxNumberOfProductOfSimilarUserToConsider=100, numberOfProductToConsider=100):\\n    try :\\n        distances, info = knn.kneighbors(np.squeeze(np.asarray(df_userfeatures.where(col(\\\"id\\\") == str(user_id)).select(col(\\\"features\\\")).take(1))).reshape(1,5))\\n    except Exception, e:\\n        print(\\\"Cold start strategy applied\\\")\\n        distances, info = knn.kneighbors(np.squeeze(np.asarray(df_userfeatures.select(col(\\\"features\\\")).take(1))).reshape(1,5)) # COLD START Strategy\\n    movieRecCB =df_all[df_all[\\\"user_id\\\"].isin(np.squeeze(info).tolist())].collect()\\n    movieRecCB =sorted(movieRecCB,key=lambda k: k[\\\"rating\\\"],reverse=True)[:maxNumberOfProductOfSimilarUserToConsider]\\n        \\n    try:\\n        alsRec = als.recommendProducts(user_id,numberOfProductToConsider)\\n    except Exception, e:\\n        alsRec = []\\n    movieRec = []\\n    for el in movieRecCB :\\n        ind = [x for x, y in enumerate(movieRec) if y[0] == el[\\\"movied_id\\\"]]\\n        if len(ind)!=0:\\n            ind= ind[0]\\n            tmpVal = movieRec[ind][1] +1 # Add one each time a movie is recommended by a new user similar\\n            movieRec.pop(ind)\\n        else :\\n            tmpVal =0 \\n            try :\\n                tmpVal += als.predict(user_id,el[\\\"movied_id\\\"])\\n            except Exception,e :\\n                tmpVal += el[\\\"rating\\\"] # Cold Start user does not exist yet\\n                \\n        for el2 in alsRec :\\n            if el[\\\"movied_id\\\"]==el2[1]:\\n                tmpVal += 1.5\\n                alsRec.remove(el2)\\n        movieRec.append((el[\\\"movied_id\\\"],tmpVal))\\n       \\n       \\n    for el2 in alsRec:\\n        movieRec.append((el2[1],el2[2]))\\n        \\n    movieRecFiltered = sorted(movieRec,key=lambda k: k[1],reverse=True)[:maxNumberOfElementToRecomend]\\n    bestmovieforuser = [el[0] for el in movieRecFiltered]\\n    return movieRecFiltered, bestmovieforuser\\n    \\ndef movies_num_to_name(list_movies_nums, df_movies_name=None):\\n    if df_movies_name is None:\\n        df_movies_name = spark.sql(\\\"SELECT id,title FROM default.movie_names_netflix_parquet\\\").select(col(\\\"id\\\").cast('int'),col(\\\"title\\\").cast('String'))\\n    # Convert \\n    list_movies_names = [df_movies_name[df_movies_name[\\\"id\\\"]==el].take(1)[0][1] for el in list_movies_nums]\\n    return list_movies_names\\n    \\n\", \"statusForButtons\": \"executed\", \"showLogs\": false, \"variableNames\": [], \"associatedDocumentUuid\": null, \"compatibilitySourcePlatform\": \"pyspark\", \"chartLimit\": null, \"progress\": 0, \"chartType\": \"bars\", \"isFetchingData\": false, \"name\": \"\", \"statementTypes\": [\"text\", \"file\", \"document\"], \"is_redacted\": false, \"currentQueryTab\": \"queryHistory\", \"chartScope\": \"world\", \"result\": {\"statement_id\": 0, \"isMetaFilterVisible\": false, \"meta\": [], \"logLines\": 0, \"id\": \"66f94362-df29-2936-5195-4af11c7c4f1e\", \"logs\": \"\", \"statements_count\": 1, \"rows\": \"1\", \"hasSomeResults\": false, \"filteredMetaChecked\": true, \"hasMore\": false, \"filteredMeta\": [], \"type\": \"text\", \"handle\": {\"has_result_set\": true, \"id\": 1}, \"metaFilter\": \"\", \"explanation\": \"\", \"statement_range\": {\"start\": {\"column\": 0, \"row\": 0}, \"end\": {\"column\": 0, \"row\": 0}}, \"startTime\": \"2021-06-23T07:45:43.013Z\", \"data\": [], \"previous_statement_hash\": null, \"executionTime\": 0, \"fetchedOnce\": false, \"hasResultset\": true, \"endTime\": \"2021-06-23T07:45:43.013Z\"}, \"errors\": [], \"chartMapHeat\": null, \"compatibilitySourcePlatforms\": [{\"name\": \"Teradata\", \"value\": \"teradata\"}, {\"name\": \"Oracle\", \"value\": \"oracle\"}, {\"name\": \"Netezza\", \"value\": \"netezza\"}, {\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}, {\"name\": \"DB2\", \"value\": \"db2\"}, {\"name\": \"Greenplum\", \"value\": \"greenplum\"}, {\"name\": \"MySQL\", \"value\": \"mysql\"}, {\"name\": \"PostgreSQL\", \"value\": \"postgresql\"}, {\"name\": \"Informix\", \"value\": \"informix\"}, {\"name\": \"SQL Server\", \"value\": \"sqlserver\"}, {\"name\": \"Sybase\", \"value\": \"sybase\"}, {\"name\": \"Access\", \"value\": \"access\"}, {\"name\": \"Firebird\", \"value\": \"firebird\"}, {\"name\": \"ANSISQL\", \"value\": \"ansisql\"}, {\"name\": \"Generic\", \"value\": \"generic\"}], \"aceErrorsHolder\": [], \"showOptimizer\": false, \"compatibilityTargetPlatform\": \"pyspark\", \"jobs\": [], \"statementType\": \"text\", \"variableValues\": {}, \"isCanceling\": false, \"queriesTotalPages\": 0, \"formatEnabled\": true, \"properties\": {}, \"aceErrors\": [], \"externalStatementLoaded\": false, \"chartScatterSize\": null, \"chartYSingle\": null, \"suggestion\": \"\", \"statementPath\": \"\", \"showLongOperationWarning\": false, \"chartX\": \"Header\", \"lastExecuted\": 1624434343007, \"variables\": [], \"showChart\": false, \"isResultSettingsVisible\": false, \"showGrid\": true, \"pinnedContextTabs\": [], \"viewSettings\": {\"placeHolder\": \"Example: 1 + 1, or press CTRL + space\"}, \"statementsList\": [\"def run_cmd(args_list):\\n        \\\"\\\"\\\"\\n        run linux commands\\n        \\\"\\\"\\\"\\n        # import subprocess\\n        print('Running system command: {0}'.format(' '.join(args_list)))\\n        proc = subprocess.Popen(args_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\n        s_output, s_err = proc.communicate()\\n        s_return =  proc.returncode\\n        return s_return, s_output, s_err \\n\\ndef load_data():\\n    df = spark.sql(\\\"SELECT * FROM default.netflix_trainwithouttest_parquet LIMIT 10000000\\\") #\\n    df= df#.repartition(20).persist(StorageLevel.DISK_ONLY)\\n    df = df.select(col('user_id').cast('int'),col('movied_id').cast('int'),col('rating').cast('Double'))\\n    #train, test = df.randomSplit([0.7, 0.3], 42)\\n    train = df\\n    \\n    dfT = spark.sql(\\\"SELECT * FROM default.netflix_test_parquet\\\")\\n    dfT = dfT.select(col('user_id').cast('int'),col('movied_id').cast('int'),col('rating').cast('Double'))\\n    test = dfT\\n    \\n    df2 = spark.sql(\\\"SELECT id,total_number_of_movie,average_rating,best_mark,worst_mark,average_movie_monthly FROM default.user_parquet\\\")\\n    df2 = df2.fillna(0, subset=[\\\"id\\\",\\\"total_number_of_movie\\\",\\\"average_rating\\\",\\\"best_mark\\\",\\\"worst_mark\\\",\\\"average_movie_monthly\\\"])\\n    assembler = VectorAssembler(inputCols=[\\\"total_number_of_movie\\\",\\\"average_rating\\\",\\\"best_mark\\\",\\\"worst_mark\\\",\\\"average_movie_monthly\\\"],outputCol=\\\"features\\\")\\n    transformed = assembler.transform(df2)\\n    df3 = transformed.withColumn(\\\"id\\\", transformed[\\\"id\\\"].cast(\\\"double\\\"))\\n    df_userfeatures = df3.select(col(\\\"id\\\"),col(\\\"features\\\"))\\n    return train, test, df_userfeatures\\n    \\ndef train_als(trainset_df, rank=10, numIt=10,alphaV=0.065):\\n    X_train_rdd = trainset_df.rdd.repartition(4)#\\n    return ALS.train(X_train_rdd,rank,numIt,alphaV)\\n\\ndef save_als_model(als, srcPath=\\\"/home/cloudera/tmp/myCollaborativeFilter\\\"):\\n    # Prepare a FileSystem manager\\n    fs = (sc._jvm.org.apache.hadoop.fs.FileSystem.get(sc._jsc.hadoopConfiguration()))\\n    run_cmd(['hdfs', 'dfs', '-rm', '-r', srcPath])\\n    als.save(sc, \\\"/home/cloudera/tmp/myCollaborativeFilter\\\")\\n\\ndef load_als_model(srcPath=\\\"/home/cloudera/tmp/myCollaborativeFilter\\\"):\\n    return MatrixFactorizationModel.load(sc, srcPath)\\n\\ndef RMSE_ALS(als, test_df):\\n    testdata = test_df.select(col('user_id'),col('movied_id')).rdd\\n    predictions = als.predictAll(testdata).map(lambda r: ((r[0], r[1]), r[2]))\\n    ratesAndPreds = test_df.rdd.map(lambda r: ((r[0], r[1]), r[2])).join(predictions)\\n    MSE = ratesAndPreds.map(lambda r: (r[1][0] - r[1][1])**2).mean()\\n    print(\\\"Root Mean Squared Error = \\\" + str(np.sqrt(MSE)))\\n\\ndef train_knn(df_userfeatures, numberNeighboor=100):\\n    res = df_userfeatures.select(col(\\\"features\\\"))\\n    res = res.repartition(4)\\n    collected_res = res.collect()\\n\\n    collected_res = np.asarray(collected_res).transpose(0,1,2).reshape(-1,5)\\n    #collected_res = collected_res / collected_res.max(axis=0)\\n    knn = NearestNeighbors(numberNeighboor).fit(collected_res)\\n    #bc_knn = sc.broadcast(knn)\\n    #results = res.map(lambda x: bc_knn.value.kneighbors(x))\\n    return knn\\n\\ndef save_knn_model(knn,filename = '/home/cloudera/tmp/finalized_model.sav'):\\n    pickle.dump(knn, open(filename, 'wb'))\\n    \\ndef load_knn_model(filename = '/home/cloudera/tmp/finalized_model.sav'):\\n    # load the model from disk\\n    return pickle.load(open(filename, 'rb'))\\n    \\ndef recommendMoviesToUser(user_id, df_userfeatures, df_all, maxNumberOfElementToRecomend=100,maxNumberOfProductOfSimilarUserToConsider=100, numberOfProductToConsider=100):\\n    try :\\n        distances, info = knn.kneighbors(np.squeeze(np.asarray(df_userfeatures.where(col(\\\"id\\\") == str(user_id)).select(col(\\\"features\\\")).take(1))).reshape(1,5))\\n    except Exception, e:\\n        print(\\\"Cold start strategy applied\\\")\\n        distances, info = knn.kneighbors(np.squeeze(np.asarray(df_userfeatures.select(col(\\\"features\\\")).take(1))).reshape(1,5)) # COLD START Strategy\\n    movieRecCB =df_all[df_all[\\\"user_id\\\"].isin(np.squeeze(info).tolist())].collect()\\n    movieRecCB =sorted(movieRecCB,key=lambda k: k[\\\"rating\\\"],reverse=True)[:maxNumberOfProductOfSimilarUserToConsider]\\n        \\n    try:\\n        alsRec = als.recommendProducts(user_id,numberOfProductToConsider)\\n    except Exception, e:\\n        alsRec = []\\n    movieRec = []\\n    for el in movieRecCB :\\n        ind = [x for x, y in enumerate(movieRec) if y[0] == el[\\\"movied_id\\\"]]\\n        if len(ind)!=0:\\n            ind= ind[0]\\n            tmpVal = movieRec[ind][1] +1 # Add one each time a movie is recommended by a new user similar\\n            movieRec.pop(ind)\\n        else :\\n            tmpVal =0 \\n            try :\\n                tmpVal += als.predict(user_id,el[\\\"movied_id\\\"])\\n            except Exception,e :\\n                tmpVal += el[\\\"rating\\\"] # Cold Start user does not exist yet\\n                \\n        for el2 in alsRec :\\n            if el[\\\"movied_id\\\"]==el2[1]:\\n                tmpVal += 1.5\\n                alsRec.remove(el2)\\n        movieRec.append((el[\\\"movied_id\\\"],tmpVal))\\n       \\n       \\n    for el2 in alsRec:\\n        movieRec.append((el2[1],el2[2]))\\n        \\n    movieRecFiltered = sorted(movieRec,key=lambda k: k[1],reverse=True)[:maxNumberOfElementToRecomend]\\n    bestmovieforuser = [el[0] for el in movieRecFiltered]\\n    return movieRecFiltered, bestmovieforuser\\n    \\ndef movies_num_to_name(list_movies_nums, df_movies_name=None):\\n    if df_movies_name is None:\\n        df_movies_name = spark.sql(\\\"SELECT id,title FROM default.movie_names_netflix_parquet\\\").select(col(\\\"id\\\").cast('int'),col(\\\"title\\\").cast('String'))\\n    # Convert \\n    list_movies_names = [df_movies_name[df_movies_name[\\\"id\\\"]==el].take(1)[0][1] for el in list_movies_nums]\\n    return list_movies_names\\n    \\n\"], \"lastAceSelectionRowOffset\": 8, \"executingBlockingOperation\": null, \"errorsKlass\": \"results pyspark alert alert-error\", \"statement\": \"def run_cmd(args_list):\\n        \\\"\\\"\\\"\\n        run linux commands\\n        \\\"\\\"\\\"\\n        # import subprocess\\n        print('Running system command: {0}'.format(' '.join(args_list)))\\n        proc = subprocess.Popen(args_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\n        s_output, s_err = proc.communicate()\\n        s_return =  proc.returncode\\n        return s_return, s_output, s_err \\n\\ndef load_data():\\n    df = spark.sql(\\\"SELECT * FROM default.netflix_trainwithouttest_parquet LIMIT 10000000\\\") #\\n    df= df#.repartition(20).persist(StorageLevel.DISK_ONLY)\\n    df = df.select(col('user_id').cast('int'),col('movied_id').cast('int'),col('rating').cast('Double'))\\n    #train, test = df.randomSplit([0.7, 0.3], 42)\\n    train = df\\n    \\n    dfT = spark.sql(\\\"SELECT * FROM default.netflix_test_parquet\\\")\\n    dfT = dfT.select(col('user_id').cast('int'),col('movied_id').cast('int'),col('rating').cast('Double'))\\n    test = dfT\\n    \\n    df2 = spark.sql(\\\"SELECT id,total_number_of_movie,average_rating,best_mark,worst_mark,average_movie_monthly FROM default.user_parquet\\\")\\n    df2 = df2.fillna(0, subset=[\\\"id\\\",\\\"total_number_of_movie\\\",\\\"average_rating\\\",\\\"best_mark\\\",\\\"worst_mark\\\",\\\"average_movie_monthly\\\"])\\n    assembler = VectorAssembler(inputCols=[\\\"total_number_of_movie\\\",\\\"average_rating\\\",\\\"best_mark\\\",\\\"worst_mark\\\",\\\"average_movie_monthly\\\"],outputCol=\\\"features\\\")\\n    transformed = assembler.transform(df2)\\n    df3 = transformed.withColumn(\\\"id\\\", transformed[\\\"id\\\"].cast(\\\"double\\\"))\\n    df_userfeatures = df3.select(col(\\\"id\\\"),col(\\\"features\\\"))\\n    return train, test, df_userfeatures\\n    \\ndef train_als(trainset_df, rank=10, numIt=10,alphaV=0.065):\\n    X_train_rdd = trainset_df.rdd.repartition(4)#\\n    return ALS.train(X_train_rdd,rank,numIt,alphaV)\\n\\ndef save_als_model(als, srcPath=\\\"/home/cloudera/tmp/myCollaborativeFilter\\\"):\\n    # Prepare a FileSystem manager\\n    fs = (sc._jvm.org.apache.hadoop.fs.FileSystem.get(sc._jsc.hadoopConfiguration()))\\n    run_cmd(['hdfs', 'dfs', '-rm', '-r', srcPath])\\n    als.save(sc, \\\"/home/cloudera/tmp/myCollaborativeFilter\\\")\\n\\ndef load_als_model(srcPath=\\\"/home/cloudera/tmp/myCollaborativeFilter\\\"):\\n    return MatrixFactorizationModel.load(sc, srcPath)\\n\\ndef RMSE_ALS(als, test_df):\\n    testdata = test_df.select(col('user_id'),col('movied_id')).rdd\\n    predictions = als.predictAll(testdata).map(lambda r: ((r[0], r[1]), r[2]))\\n    ratesAndPreds = test_df.rdd.map(lambda r: ((r[0], r[1]), r[2])).join(predictions)\\n    MSE = ratesAndPreds.map(lambda r: (r[1][0] - r[1][1])**2).mean()\\n    print(\\\"Root Mean Squared Error = \\\" + str(np.sqrt(MSE)))\\n\\ndef train_knn(df_userfeatures, numberNeighboor=100):\\n    res = df_userfeatures.select(col(\\\"features\\\"))\\n    res = res.repartition(4)\\n    collected_res = res.collect()\\n\\n    collected_res = np.asarray(collected_res).transpose(0,1,2).reshape(-1,5)\\n    #collected_res = collected_res / collected_res.max(axis=0)\\n    knn = NearestNeighbors(numberNeighboor).fit(collected_res)\\n    #bc_knn = sc.broadcast(knn)\\n    #results = res.map(lambda x: bc_knn.value.kneighbors(x))\\n    return knn\\n\\ndef save_knn_model(knn,filename = '/home/cloudera/tmp/finalized_model.sav'):\\n    pickle.dump(knn, open(filename, 'wb'))\\n    \\ndef load_knn_model(filename = '/home/cloudera/tmp/finalized_model.sav'):\\n    # load the model from disk\\n    return pickle.load(open(filename, 'rb'))\\n    \\ndef recommendMoviesToUser(user_id, df_userfeatures, df_all, maxNumberOfElementToRecomend=100,maxNumberOfProductOfSimilarUserToConsider=100, numberOfProductToConsider=100):\\n    try :\\n        distances, info = knn.kneighbors(np.squeeze(np.asarray(df_userfeatures.where(col(\\\"id\\\") == str(user_id)).select(col(\\\"features\\\")).take(1))).reshape(1,5))\\n    except Exception, e:\\n        print(\\\"Cold start strategy applied\\\")\\n        distances, info = knn.kneighbors(np.squeeze(np.asarray(df_userfeatures.select(col(\\\"features\\\")).take(1))).reshape(1,5)) # COLD START Strategy\\n    movieRecCB =df_all[df_all[\\\"user_id\\\"].isin(np.squeeze(info).tolist())].collect()\\n    movieRecCB =sorted(movieRecCB,key=lambda k: k[\\\"rating\\\"],reverse=True)[:maxNumberOfProductOfSimilarUserToConsider]\\n        \\n    try:\\n        alsRec = als.recommendProducts(user_id,numberOfProductToConsider)\\n    except Exception, e:\\n        alsRec = []\\n    movieRec = []\\n    for el in movieRecCB :\\n        ind = [x for x, y in enumerate(movieRec) if y[0] == el[\\\"movied_id\\\"]]\\n        if len(ind)!=0:\\n            ind= ind[0]\\n            tmpVal = movieRec[ind][1] +1 # Add one each time a movie is recommended by a new user similar\\n            movieRec.pop(ind)\\n        else :\\n            tmpVal =0 \\n            try :\\n                tmpVal += als.predict(user_id,el[\\\"movied_id\\\"])\\n            except Exception,e :\\n                tmpVal += el[\\\"rating\\\"] # Cold Start user does not exist yet\\n                \\n        for el2 in alsRec :\\n            if el[\\\"movied_id\\\"]==el2[1]:\\n                tmpVal += 1.5\\n                alsRec.remove(el2)\\n        movieRec.append((el[\\\"movied_id\\\"],tmpVal))\\n       \\n       \\n    for el2 in alsRec:\\n        movieRec.append((el2[1],el2[2]))\\n        \\n    movieRecFiltered = sorted(movieRec,key=lambda k: k[1],reverse=True)[:maxNumberOfElementToRecomend]\\n    bestmovieforuser = [el[0] for el in movieRecFiltered]\\n    return movieRecFiltered, bestmovieforuser\\n    \\ndef movies_num_to_name(list_movies_nums, df_movies_name=None):\\n    if df_movies_name is None:\\n        df_movies_name = spark.sql(\\\"SELECT id,title FROM default.movie_names_netflix_parquet\\\").select(col(\\\"id\\\").cast('int'),col(\\\"title\\\").cast('String'))\\n    # Convert \\n    list_movies_names = [df_movies_name[df_movies_name[\\\"id\\\"]==el].take(1)[0][1] for el in list_movies_nums]\\n    return list_movies_names\\n    \\n\", \"type\": \"pyspark\", \"chartSorting\": \"none\", \"previousChartOptions\": {\"chartTimelineType\": \"bar\", \"chartSorting\": \"none\", \"chartLimit\": null, \"chartMapHeat\": null, \"chartX\": \"Header\", \"chartMapType\": \"marker\", \"chartYMulti\": [], \"chartScatterSize\": null, \"chartScope\": \"world\", \"chartMapLabel\": null, \"chartScatterGroup\": null, \"chartYSingle\": null, \"chartXPivot\": null}, \"aceWarningsHolder\": [], \"resultsKlass\": \"results pyspark\", \"chartTimelineType\": \"bar\", \"compatibilityTargetPlatforms\": [{\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}], \"topRisk\": null, \"hasCurlyBracketParameters\": true, \"chartScatterGroup\": null, \"settingsVisible\": false, \"queriesFilterVisible\": false, \"aceWarnings\": [], \"compatibilityCheckRunning\": false, \"isLoading\": true, \"loadingQueries\": false, \"hasDataForChart\": false, \"id\": \"97a817f2-fe04-f4d1-8ebb-8260b8c433f0\", \"aceSize\": 100, \"chartData\": [], \"queriesHasErrors\": false, \"chartMapLabel\": null, \"status\": \"loading\", \"chartMapType\": \"marker\", \"queriesFilter\": \"\", \"queriesCurrentPage\": 1, \"isBatchable\": false, \"chartYMulti\": [], \"dbSelectionVisible\": false, \"database\": \"default\", \"hasSuggestion\": null, \"chartXPivot\": null, \"checkStatusTimeout\": null}, {\"wasBatchExecuted\": false, \"chartLimits\": [5, 10, 25, 50, 100], \"associatedDocumentLoading\": true, \"isReady\": true, \"statement_raw\": \"train, test, user = load_data()\\nals = load_als_model()\\nknn = load_knn_model()\\n\", \"statusForButtons\": \"executed\", \"showLogs\": false, \"variableNames\": [], \"associatedDocumentUuid\": null, \"compatibilitySourcePlatform\": \"pyspark\", \"chartLimit\": null, \"progress\": 0, \"chartType\": \"bars\", \"isFetchingData\": false, \"name\": \"\", \"statementTypes\": [\"text\", \"file\", \"document\"], \"is_redacted\": false, \"currentQueryTab\": \"queryHistory\", \"chartScope\": \"world\", \"result\": {\"statement_id\": 0, \"isMetaFilterVisible\": false, \"meta\": [], \"logLines\": 0, \"id\": \"915a09d6-fd10-a506-96a0-b75cd8d0b669\", \"logs\": \"\", \"statements_count\": 1, \"rows\": \"1\", \"hasSomeResults\": false, \"filteredMetaChecked\": true, \"hasMore\": false, \"filteredMeta\": [], \"type\": \"text\", \"handle\": {\"has_result_set\": true, \"id\": 4}, \"metaFilter\": \"\", \"explanation\": \"\", \"statement_range\": {\"start\": {\"column\": 0, \"row\": 0}, \"end\": {\"column\": 0, \"row\": 0}}, \"startTime\": \"2021-06-23T07:51:10.983Z\", \"data\": [], \"previous_statement_hash\": null, \"executionTime\": 4497, \"fetchedOnce\": false, \"hasResultset\": true, \"endTime\": \"2021-06-23T07:51:15.480Z\"}, \"errors\": [], \"chartMapHeat\": null, \"compatibilitySourcePlatforms\": [{\"name\": \"Teradata\", \"value\": \"teradata\"}, {\"name\": \"Oracle\", \"value\": \"oracle\"}, {\"name\": \"Netezza\", \"value\": \"netezza\"}, {\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}, {\"name\": \"DB2\", \"value\": \"db2\"}, {\"name\": \"Greenplum\", \"value\": \"greenplum\"}, {\"name\": \"MySQL\", \"value\": \"mysql\"}, {\"name\": \"PostgreSQL\", \"value\": \"postgresql\"}, {\"name\": \"Informix\", \"value\": \"informix\"}, {\"name\": \"SQL Server\", \"value\": \"sqlserver\"}, {\"name\": \"Sybase\", \"value\": \"sybase\"}, {\"name\": \"Access\", \"value\": \"access\"}, {\"name\": \"Firebird\", \"value\": \"firebird\"}, {\"name\": \"ANSISQL\", \"value\": \"ansisql\"}, {\"name\": \"Generic\", \"value\": \"generic\"}], \"aceErrorsHolder\": [], \"showOptimizer\": false, \"compatibilityTargetPlatform\": \"pyspark\", \"jobs\": [], \"statementType\": \"text\", \"variableValues\": {}, \"isCanceling\": false, \"queriesTotalPages\": 0, \"formatEnabled\": true, \"properties\": {}, \"aceErrors\": [], \"externalStatementLoaded\": false, \"chartScatterSize\": null, \"chartYSingle\": null, \"suggestion\": \"\", \"statementPath\": \"\", \"showLongOperationWarning\": false, \"chartX\": \"Header\", \"lastExecuted\": 1624434670960, \"variables\": [], \"showChart\": false, \"isResultSettingsVisible\": false, \"showGrid\": true, \"pinnedContextTabs\": [], \"viewSettings\": {\"placeHolder\": \"Example: 1 + 1, or press CTRL + space\"}, \"statementsList\": [\"train, test, user = load_data()\\nals = load_als_model()\\nknn = load_knn_model()\\n\"], \"lastAceSelectionRowOffset\": 0, \"executingBlockingOperation\": null, \"errorsKlass\": \"results pyspark alert alert-error\", \"statement\": \"train, test, user = load_data()\\nals = load_als_model()\\nknn = load_knn_model()\\n\", \"type\": \"pyspark\", \"chartSorting\": \"none\", \"previousChartOptions\": {\"chartTimelineType\": \"bar\", \"chartSorting\": \"none\", \"chartLimit\": null, \"chartMapHeat\": null, \"chartX\": \"Header\", \"chartMapType\": \"marker\", \"chartYMulti\": [], \"chartScatterSize\": null, \"chartScope\": \"world\", \"chartMapLabel\": null, \"chartScatterGroup\": null, \"chartYSingle\": null, \"chartXPivot\": null}, \"aceWarningsHolder\": [], \"resultsKlass\": \"results pyspark\", \"chartTimelineType\": \"bar\", \"compatibilityTargetPlatforms\": [{\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}], \"topRisk\": null, \"hasCurlyBracketParameters\": true, \"chartScatterGroup\": null, \"settingsVisible\": false, \"queriesFilterVisible\": false, \"aceWarnings\": [], \"compatibilityCheckRunning\": false, \"isLoading\": true, \"loadingQueries\": false, \"hasDataForChart\": false, \"id\": \"91fb274e-4bf0-7181-0247-08314a715d9e\", \"aceSize\": 100, \"chartData\": [], \"queriesHasErrors\": false, \"chartMapLabel\": null, \"status\": \"loading\", \"chartMapType\": \"marker\", \"queriesFilter\": \"\", \"queriesCurrentPage\": 1, \"isBatchable\": false, \"chartYMulti\": [], \"dbSelectionVisible\": false, \"database\": \"default\", \"hasSuggestion\": null, \"chartXPivot\": null, \"checkStatusTimeout\": null}, {\"wasBatchExecuted\": false, \"chartLimits\": [5, 10, 25, 50, 100], \"associatedDocumentLoading\": true, \"isReady\": true, \"statement_raw\": \"\\nmovieRec, bestMovies = recommendMoviesToUser(1,user,train)\\nprint movieRec\\nprint(movies_num_to_name(bestMovies))\", \"statusForButtons\": \"executed\", \"showLogs\": false, \"variableNames\": [], \"associatedDocumentUuid\": null, \"compatibilitySourcePlatform\": \"pyspark\", \"chartLimit\": null, \"progress\": 0, \"chartType\": \"bars\", \"isFetchingData\": false, \"name\": \"\", \"statementTypes\": [\"text\", \"file\", \"document\"], \"is_redacted\": false, \"currentQueryTab\": \"queryHistory\", \"chartScope\": \"world\", \"result\": {\"statement_id\": 0, \"isMetaFilterVisible\": false, \"meta\": [], \"logLines\": 0, \"id\": \"bb4d4a77-4b99-8e4e-e918-666fd30f0015\", \"logs\": \"\", \"statements_count\": 1, \"rows\": \"1\", \"hasSomeResults\": false, \"filteredMetaChecked\": true, \"hasMore\": false, \"filteredMeta\": [], \"type\": \"text\", \"handle\": {\"has_result_set\": true, \"id\": 5}, \"metaFilter\": \"\", \"explanation\": \"\", \"statement_range\": {\"start\": {\"column\": 0, \"row\": 0}, \"end\": {\"column\": 0, \"row\": 0}}, \"startTime\": \"2021-06-23T07:51:14.459Z\", \"data\": [], \"previous_statement_hash\": null, \"executionTime\": 298675, \"fetchedOnce\": false, \"hasResultset\": true, \"endTime\": \"2021-06-23T07:56:13.134Z\"}, \"errors\": [], \"chartMapHeat\": null, \"compatibilitySourcePlatforms\": [{\"name\": \"Teradata\", \"value\": \"teradata\"}, {\"name\": \"Oracle\", \"value\": \"oracle\"}, {\"name\": \"Netezza\", \"value\": \"netezza\"}, {\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}, {\"name\": \"DB2\", \"value\": \"db2\"}, {\"name\": \"Greenplum\", \"value\": \"greenplum\"}, {\"name\": \"MySQL\", \"value\": \"mysql\"}, {\"name\": \"PostgreSQL\", \"value\": \"postgresql\"}, {\"name\": \"Informix\", \"value\": \"informix\"}, {\"name\": \"SQL Server\", \"value\": \"sqlserver\"}, {\"name\": \"Sybase\", \"value\": \"sybase\"}, {\"name\": \"Access\", \"value\": \"access\"}, {\"name\": \"Firebird\", \"value\": \"firebird\"}, {\"name\": \"ANSISQL\", \"value\": \"ansisql\"}, {\"name\": \"Generic\", \"value\": \"generic\"}], \"aceErrorsHolder\": [], \"showOptimizer\": false, \"compatibilityTargetPlatform\": \"pyspark\", \"jobs\": [], \"statementType\": \"text\", \"variableValues\": {}, \"isCanceling\": false, \"queriesTotalPages\": 0, \"formatEnabled\": true, \"properties\": {}, \"aceErrors\": [], \"externalStatementLoaded\": false, \"chartScatterSize\": null, \"chartYSingle\": null, \"suggestion\": \"\", \"statementPath\": \"\", \"showLongOperationWarning\": false, \"chartX\": \"Header\", \"lastExecuted\": 1624434674453, \"variables\": [], \"showChart\": false, \"isResultSettingsVisible\": false, \"showGrid\": true, \"pinnedContextTabs\": [], \"viewSettings\": {\"placeHolder\": \"Example: 1 + 1, or press CTRL + space\"}, \"statementsList\": [\"\\nmovieRec, bestMovies = recommendMoviesToUser(1,user,train)\\nprint movieRec\\nprint(movies_num_to_name(bestMovies))\"], \"lastAceSelectionRowOffset\": 0, \"executingBlockingOperation\": null, \"errorsKlass\": \"results pyspark alert alert-error\", \"statement\": \"\\nmovieRec, bestMovies = recommendMoviesToUser(1,user,train)\\nprint movieRec\\nprint(movies_num_to_name(bestMovies))\", \"type\": \"pyspark\", \"chartSorting\": \"none\", \"previousChartOptions\": {\"chartTimelineType\": \"bar\", \"chartSorting\": \"none\", \"chartLimit\": null, \"chartMapHeat\": null, \"chartX\": \"Header\", \"chartMapType\": \"marker\", \"chartYMulti\": [], \"chartScatterSize\": null, \"chartScope\": \"world\", \"chartMapLabel\": null, \"chartScatterGroup\": null, \"chartYSingle\": null, \"chartXPivot\": null}, \"aceWarningsHolder\": [], \"resultsKlass\": \"results pyspark\", \"chartTimelineType\": \"bar\", \"compatibilityTargetPlatforms\": [{\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}], \"topRisk\": null, \"hasCurlyBracketParameters\": true, \"chartScatterGroup\": null, \"settingsVisible\": false, \"queriesFilterVisible\": false, \"aceWarnings\": [], \"compatibilityCheckRunning\": false, \"isLoading\": true, \"loadingQueries\": false, \"hasDataForChart\": false, \"id\": \"60c3dd0d-17bd-9260-decd-9c8d52a1d566\", \"aceSize\": 100, \"chartData\": [], \"queriesHasErrors\": false, \"chartMapLabel\": null, \"status\": \"loading\", \"chartMapType\": \"marker\", \"queriesFilter\": \"\", \"queriesCurrentPage\": 1, \"isBatchable\": false, \"chartYMulti\": [], \"dbSelectionVisible\": false, \"database\": \"default\", \"hasSuggestion\": null, \"chartXPivot\": null, \"checkStatusTimeout\": null}, {\"wasBatchExecuted\": false, \"chartLimits\": [5, 10, 25, 50, 100], \"associatedDocumentLoading\": true, \"isReady\": true, \"statement_raw\": \"\\nmovieRec, bestMovies = recommendMoviesToUser(1488844,user,train)\\nprint movieRec\\nprint(movies_num_to_name(bestMovies))\", \"statusForButtons\": \"executed\", \"showLogs\": false, \"variableNames\": [], \"associatedDocumentUuid\": null, \"compatibilitySourcePlatform\": \"pyspark\", \"chartLimit\": null, \"progress\": 0, \"chartType\": \"bars\", \"isFetchingData\": false, \"name\": \"\", \"statementTypes\": [\"text\", \"file\", \"document\"], \"is_redacted\": false, \"currentQueryTab\": \"queryHistory\", \"chartScope\": \"world\", \"result\": {\"statement_id\": 0, \"isMetaFilterVisible\": false, \"meta\": [], \"logLines\": 0, \"id\": \"c36e16df-ba61-f0e5-31aa-728f5a0b5bd5\", \"logs\": \"\", \"statements_count\": 1, \"rows\": \"1\", \"hasSomeResults\": false, \"filteredMetaChecked\": true, \"hasMore\": false, \"filteredMeta\": [], \"type\": \"text\", \"handle\": {\"has_result_set\": true, \"id\": 7}, \"metaFilter\": \"\", \"explanation\": \"\", \"statement_range\": {\"start\": {\"column\": 0, \"row\": 0}, \"end\": {\"column\": 0, \"row\": 0}}, \"startTime\": \"2021-06-23T08:07:46.144Z\", \"data\": [], \"previous_statement_hash\": null, \"executionTime\": 283014, \"fetchedOnce\": false, \"hasResultset\": true, \"endTime\": \"2021-06-23T08:12:29.158Z\"}, \"errors\": [], \"chartMapHeat\": null, \"compatibilitySourcePlatforms\": [{\"name\": \"Teradata\", \"value\": \"teradata\"}, {\"name\": \"Oracle\", \"value\": \"oracle\"}, {\"name\": \"Netezza\", \"value\": \"netezza\"}, {\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}, {\"name\": \"DB2\", \"value\": \"db2\"}, {\"name\": \"Greenplum\", \"value\": \"greenplum\"}, {\"name\": \"MySQL\", \"value\": \"mysql\"}, {\"name\": \"PostgreSQL\", \"value\": \"postgresql\"}, {\"name\": \"Informix\", \"value\": \"informix\"}, {\"name\": \"SQL Server\", \"value\": \"sqlserver\"}, {\"name\": \"Sybase\", \"value\": \"sybase\"}, {\"name\": \"Access\", \"value\": \"access\"}, {\"name\": \"Firebird\", \"value\": \"firebird\"}, {\"name\": \"ANSISQL\", \"value\": \"ansisql\"}, {\"name\": \"Generic\", \"value\": \"generic\"}], \"aceErrorsHolder\": [], \"showOptimizer\": false, \"compatibilityTargetPlatform\": \"pyspark\", \"jobs\": [], \"statementType\": \"text\", \"variableValues\": {}, \"isCanceling\": false, \"queriesTotalPages\": 0, \"formatEnabled\": true, \"properties\": {}, \"aceErrors\": [], \"externalStatementLoaded\": false, \"chartScatterSize\": null, \"chartYSingle\": null, \"suggestion\": \"\", \"statementPath\": \"\", \"showLongOperationWarning\": false, \"chartX\": \"Header\", \"lastExecuted\": 1624435666127, \"variables\": [], \"showChart\": false, \"isResultSettingsVisible\": false, \"showGrid\": true, \"pinnedContextTabs\": [], \"viewSettings\": {\"placeHolder\": \"Example: 1 + 1, or press CTRL + space\"}, \"statementsList\": [\"\\nmovieRec, bestMovies = recommendMoviesToUser(1488844,user,train)\\nprint movieRec\\nprint(movies_num_to_name(bestMovies))\"], \"lastAceSelectionRowOffset\": 0, \"executingBlockingOperation\": null, \"errorsKlass\": \"results pyspark alert alert-error\", \"statement\": \"\\nmovieRec, bestMovies = recommendMoviesToUser(1488844,user,train)\\nprint movieRec\\nprint(movies_num_to_name(bestMovies))\", \"type\": \"pyspark\", \"chartSorting\": \"none\", \"previousChartOptions\": {\"chartTimelineType\": \"bar\", \"chartSorting\": \"none\", \"chartLimit\": null, \"chartMapHeat\": null, \"chartX\": \"Header\", \"chartMapType\": \"marker\", \"chartYMulti\": [], \"chartScatterSize\": null, \"chartScope\": \"world\", \"chartMapLabel\": null, \"chartScatterGroup\": null, \"chartYSingle\": null, \"chartXPivot\": null}, \"aceWarningsHolder\": [], \"resultsKlass\": \"results pyspark\", \"chartTimelineType\": \"bar\", \"compatibilityTargetPlatforms\": [{\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}], \"topRisk\": null, \"hasCurlyBracketParameters\": true, \"chartScatterGroup\": null, \"settingsVisible\": false, \"queriesFilterVisible\": false, \"aceWarnings\": [], \"compatibilityCheckRunning\": false, \"isLoading\": true, \"loadingQueries\": false, \"hasDataForChart\": false, \"id\": \"2240beda-b121-377d-ecdc-c46d51ca2d68\", \"aceSize\": 100, \"chartData\": [], \"queriesHasErrors\": false, \"chartMapLabel\": null, \"status\": \"loading\", \"chartMapType\": \"marker\", \"queriesFilter\": \"\", \"queriesCurrentPage\": 1, \"isBatchable\": false, \"chartYMulti\": [], \"dbSelectionVisible\": false, \"database\": \"default\", \"hasSuggestion\": null, \"chartXPivot\": null, \"checkStatusTimeout\": null}, {\"wasBatchExecuted\": false, \"chartLimits\": [5, 10, 25, 50, 100], \"associatedDocumentLoading\": true, \"isReady\": true, \"statement_raw\": \"RMSE_ALS(als, test)\", \"statusForButtons\": \"executed\", \"showLogs\": false, \"variableNames\": [], \"associatedDocumentUuid\": null, \"compatibilitySourcePlatform\": \"pyspark\", \"chartLimit\": null, \"progress\": 0, \"chartType\": \"bars\", \"isFetchingData\": false, \"name\": \"\", \"statementTypes\": [\"text\", \"file\", \"document\"], \"is_redacted\": false, \"currentQueryTab\": \"queryHistory\", \"chartScope\": \"world\", \"result\": {\"statement_id\": 0, \"isMetaFilterVisible\": false, \"meta\": [], \"logLines\": 0, \"id\": \"ef01d9d4-5d2d-af2b-c3ca-d969317a64f0\", \"logs\": \"\", \"statements_count\": 1, \"rows\": \"1\", \"hasSomeResults\": false, \"filteredMetaChecked\": true, \"hasMore\": false, \"filteredMeta\": [], \"type\": \"text\", \"handle\": {\"has_result_set\": true, \"id\": 3}, \"metaFilter\": \"\", \"explanation\": \"\", \"statement_range\": {\"start\": {\"column\": 0, \"row\": 0}, \"end\": {\"column\": 0, \"row\": 0}}, \"startTime\": \"2021-06-23T07:46:57.114Z\", \"data\": [], \"previous_statement_hash\": null, \"executionTime\": 213740, \"fetchedOnce\": false, \"hasResultset\": true, \"endTime\": \"2021-06-23T07:50:30.854Z\"}, \"errors\": [], \"chartMapHeat\": null, \"compatibilitySourcePlatforms\": [{\"name\": \"Teradata\", \"value\": \"teradata\"}, {\"name\": \"Oracle\", \"value\": \"oracle\"}, {\"name\": \"Netezza\", \"value\": \"netezza\"}, {\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}, {\"name\": \"DB2\", \"value\": \"db2\"}, {\"name\": \"Greenplum\", \"value\": \"greenplum\"}, {\"name\": \"MySQL\", \"value\": \"mysql\"}, {\"name\": \"PostgreSQL\", \"value\": \"postgresql\"}, {\"name\": \"Informix\", \"value\": \"informix\"}, {\"name\": \"SQL Server\", \"value\": \"sqlserver\"}, {\"name\": \"Sybase\", \"value\": \"sybase\"}, {\"name\": \"Access\", \"value\": \"access\"}, {\"name\": \"Firebird\", \"value\": \"firebird\"}, {\"name\": \"ANSISQL\", \"value\": \"ansisql\"}, {\"name\": \"Generic\", \"value\": \"generic\"}], \"aceErrorsHolder\": [], \"showOptimizer\": false, \"compatibilityTargetPlatform\": \"pyspark\", \"jobs\": [], \"statementType\": \"text\", \"variableValues\": {}, \"isCanceling\": false, \"queriesTotalPages\": 0, \"formatEnabled\": true, \"properties\": {}, \"aceErrors\": [], \"externalStatementLoaded\": false, \"chartScatterSize\": null, \"chartYSingle\": null, \"suggestion\": \"\", \"statementPath\": \"\", \"showLongOperationWarning\": false, \"chartX\": \"Header\", \"lastExecuted\": 1624434417112, \"variables\": [], \"showChart\": false, \"isResultSettingsVisible\": false, \"showGrid\": true, \"pinnedContextTabs\": [], \"viewSettings\": {\"placeHolder\": \"Example: 1 + 1, or press CTRL + space\"}, \"statementsList\": [\"RMSE_ALS(als, test)\"], \"lastAceSelectionRowOffset\": 0, \"executingBlockingOperation\": null, \"errorsKlass\": \"results pyspark alert alert-error\", \"statement\": \"RMSE_ALS(als, test)\", \"type\": \"pyspark\", \"chartSorting\": \"none\", \"previousChartOptions\": {\"chartTimelineType\": \"bar\", \"chartSorting\": \"none\", \"chartLimit\": null, \"chartMapHeat\": null, \"chartX\": \"Header\", \"chartMapType\": \"marker\", \"chartYMulti\": [], \"chartScatterSize\": null, \"chartScope\": \"world\", \"chartMapLabel\": null, \"chartScatterGroup\": null, \"chartYSingle\": null, \"chartXPivot\": null}, \"aceWarningsHolder\": [], \"resultsKlass\": \"results pyspark\", \"chartTimelineType\": \"bar\", \"compatibilityTargetPlatforms\": [{\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}], \"topRisk\": null, \"hasCurlyBracketParameters\": true, \"chartScatterGroup\": null, \"settingsVisible\": false, \"queriesFilterVisible\": false, \"aceWarnings\": [], \"compatibilityCheckRunning\": false, \"isLoading\": true, \"loadingQueries\": false, \"hasDataForChart\": false, \"id\": \"da5d94b6-460d-cb32-d7fc-4520eb7d4650\", \"aceSize\": 100, \"chartData\": [], \"queriesHasErrors\": false, \"chartMapLabel\": null, \"status\": \"loading\", \"chartMapType\": \"marker\", \"queriesFilter\": \"\", \"queriesCurrentPage\": 1, \"isBatchable\": false, \"chartYMulti\": [], \"dbSelectionVisible\": false, \"database\": \"default\", \"hasSuggestion\": null, \"chartXPivot\": null, \"checkStatusTimeout\": null}, {\"wasBatchExecuted\": false, \"chartLimits\": [5, 10, 25, 50, 100], \"associatedDocumentLoading\": true, \"isReady\": true, \"statement_raw\": \"train, test, user = load_data()\\nknn = train_knn(user, numberNeighboor=100)\\nals = train_als(train, rank=10, numIt=10)\", \"statusForButtons\": \"executed\", \"showLogs\": false, \"variableNames\": [], \"associatedDocumentUuid\": null, \"compatibilitySourcePlatform\": \"pyspark\", \"chartLimit\": null, \"progress\": 0, \"chartType\": \"bars\", \"isFetchingData\": false, \"name\": \"\", \"statementTypes\": [\"text\", \"file\", \"document\"], \"is_redacted\": false, \"currentQueryTab\": \"queryHistory\", \"chartScope\": \"world\", \"result\": {\"statement_id\": 0, \"isMetaFilterVisible\": false, \"meta\": [], \"logLines\": 0, \"id\": \"2806f2e0-ba42-a83f-8ead-c90ee0f8e2f1\", \"logs\": \"\", \"statements_count\": 1, \"rows\": \"1\", \"hasSomeResults\": false, \"filteredMetaChecked\": true, \"hasMore\": false, \"filteredMeta\": [], \"type\": \"text\", \"handle\": {\"has_result_set\": true, \"id\": 6}, \"metaFilter\": \"\", \"explanation\": \"\", \"statement_range\": {\"start\": {\"column\": 0, \"row\": 0}, \"end\": {\"column\": 0, \"row\": 0}}, \"startTime\": \"2021-06-23T07:14:12.757Z\", \"data\": [], \"previous_statement_hash\": null, \"executionTime\": 556297, \"fetchedOnce\": false, \"hasResultset\": true, \"endTime\": \"2021-06-23T07:23:29.054Z\"}, \"errors\": [], \"chartMapHeat\": null, \"compatibilitySourcePlatforms\": [{\"name\": \"Teradata\", \"value\": \"teradata\"}, {\"name\": \"Oracle\", \"value\": \"oracle\"}, {\"name\": \"Netezza\", \"value\": \"netezza\"}, {\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}, {\"name\": \"DB2\", \"value\": \"db2\"}, {\"name\": \"Greenplum\", \"value\": \"greenplum\"}, {\"name\": \"MySQL\", \"value\": \"mysql\"}, {\"name\": \"PostgreSQL\", \"value\": \"postgresql\"}, {\"name\": \"Informix\", \"value\": \"informix\"}, {\"name\": \"SQL Server\", \"value\": \"sqlserver\"}, {\"name\": \"Sybase\", \"value\": \"sybase\"}, {\"name\": \"Access\", \"value\": \"access\"}, {\"name\": \"Firebird\", \"value\": \"firebird\"}, {\"name\": \"ANSISQL\", \"value\": \"ansisql\"}, {\"name\": \"Generic\", \"value\": \"generic\"}], \"aceErrorsHolder\": [], \"showOptimizer\": false, \"compatibilityTargetPlatform\": \"pyspark\", \"jobs\": [], \"statementType\": \"text\", \"variableValues\": {}, \"isCanceling\": false, \"queriesTotalPages\": 0, \"formatEnabled\": true, \"properties\": {}, \"aceErrors\": [], \"externalStatementLoaded\": false, \"chartScatterSize\": null, \"chartYSingle\": null, \"suggestion\": \"\", \"statementPath\": \"\", \"showLongOperationWarning\": false, \"chartX\": \"Header\", \"lastExecuted\": 1624432452744, \"variables\": [], \"showChart\": false, \"isResultSettingsVisible\": false, \"showGrid\": true, \"pinnedContextTabs\": [], \"viewSettings\": {\"placeHolder\": \"Example: 1 + 1, or press CTRL + space\"}, \"statementsList\": [\"train, test, user = load_data()\\nknn = train_knn(user, numberNeighboor=100)\\nals = train_als(train, rank=10, numIt=10)\"], \"lastAceSelectionRowOffset\": 1, \"executingBlockingOperation\": null, \"errorsKlass\": \"results pyspark alert alert-error\", \"statement\": \"train, test, user = load_data()\\nknn = train_knn(user, numberNeighboor=100)\\nals = train_als(train, rank=10, numIt=10)\", \"type\": \"pyspark\", \"chartSorting\": \"none\", \"previousChartOptions\": {\"chartTimelineType\": \"bar\", \"chartSorting\": \"none\", \"chartLimit\": null, \"chartMapHeat\": null, \"chartX\": \"Header\", \"chartMapType\": \"marker\", \"chartYMulti\": [], \"chartScatterSize\": null, \"chartScope\": \"world\", \"chartMapLabel\": null, \"chartScatterGroup\": null, \"chartYSingle\": null, \"chartXPivot\": null}, \"aceWarningsHolder\": [], \"resultsKlass\": \"results pyspark\", \"chartTimelineType\": \"bar\", \"compatibilityTargetPlatforms\": [{\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}], \"topRisk\": null, \"hasCurlyBracketParameters\": true, \"chartScatterGroup\": null, \"settingsVisible\": false, \"queriesFilterVisible\": false, \"aceWarnings\": [], \"compatibilityCheckRunning\": false, \"isLoading\": true, \"loadingQueries\": false, \"hasDataForChart\": false, \"id\": \"38369241-d10d-bb24-fc31-46112e59c555\", \"aceSize\": 100, \"chartData\": [], \"queriesHasErrors\": false, \"chartMapLabel\": null, \"status\": \"loading\", \"chartMapType\": \"marker\", \"queriesFilter\": \"\", \"queriesCurrentPage\": 1, \"isBatchable\": false, \"chartYMulti\": [], \"dbSelectionVisible\": false, \"database\": \"default\", \"hasSuggestion\": null, \"chartXPivot\": null, \"checkStatusTimeout\": null}, {\"wasBatchExecuted\": false, \"chartLimits\": [5, 10, 25, 50, 100], \"associatedDocumentLoading\": true, \"isReady\": true, \"statement_raw\": \"save_knn_model(knn)\\nsave_als_model(als)\\n\", \"statusForButtons\": \"executed\", \"showLogs\": false, \"variableNames\": [], \"associatedDocumentUuid\": null, \"compatibilitySourcePlatform\": \"pyspark\", \"chartLimit\": null, \"progress\": 0, \"chartType\": \"bars\", \"isFetchingData\": false, \"name\": \"\", \"statementTypes\": [\"text\", \"file\", \"document\"], \"is_redacted\": false, \"currentQueryTab\": \"queryHistory\", \"chartScope\": \"world\", \"result\": {\"statement_id\": 0, \"isMetaFilterVisible\": false, \"meta\": [], \"logLines\": 0, \"id\": \"799081c0-5b75-a5db-33b3-7d7a53980232\", \"logs\": \"\", \"statements_count\": 1, \"rows\": \"1\", \"hasSomeResults\": false, \"filteredMetaChecked\": true, \"hasMore\": false, \"filteredMeta\": [], \"type\": \"text\", \"handle\": {\"has_result_set\": true, \"id\": 9}, \"metaFilter\": \"\", \"explanation\": \"\", \"statement_range\": {\"start\": {\"column\": 0, \"row\": 0}, \"end\": {\"column\": 0, \"row\": 0}}, \"startTime\": \"2021-06-23T07:26:50.704Z\", \"data\": [], \"previous_statement_hash\": null, \"executionTime\": 28557, \"fetchedOnce\": false, \"hasResultset\": true, \"endTime\": \"2021-06-23T07:27:19.261Z\"}, \"errors\": [], \"chartMapHeat\": null, \"compatibilitySourcePlatforms\": [{\"name\": \"Teradata\", \"value\": \"teradata\"}, {\"name\": \"Oracle\", \"value\": \"oracle\"}, {\"name\": \"Netezza\", \"value\": \"netezza\"}, {\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}, {\"name\": \"DB2\", \"value\": \"db2\"}, {\"name\": \"Greenplum\", \"value\": \"greenplum\"}, {\"name\": \"MySQL\", \"value\": \"mysql\"}, {\"name\": \"PostgreSQL\", \"value\": \"postgresql\"}, {\"name\": \"Informix\", \"value\": \"informix\"}, {\"name\": \"SQL Server\", \"value\": \"sqlserver\"}, {\"name\": \"Sybase\", \"value\": \"sybase\"}, {\"name\": \"Access\", \"value\": \"access\"}, {\"name\": \"Firebird\", \"value\": \"firebird\"}, {\"name\": \"ANSISQL\", \"value\": \"ansisql\"}, {\"name\": \"Generic\", \"value\": \"generic\"}], \"aceErrorsHolder\": [], \"showOptimizer\": false, \"compatibilityTargetPlatform\": \"pyspark\", \"jobs\": [], \"statementType\": \"text\", \"variableValues\": {}, \"isCanceling\": false, \"queriesTotalPages\": 0, \"formatEnabled\": true, \"properties\": {}, \"aceErrors\": [], \"externalStatementLoaded\": false, \"chartScatterSize\": null, \"chartYSingle\": null, \"suggestion\": \"\", \"statementPath\": \"\", \"showLongOperationWarning\": false, \"chartX\": \"Header\", \"lastExecuted\": 1624433210702, \"variables\": [], \"showChart\": false, \"isResultSettingsVisible\": false, \"showGrid\": true, \"pinnedContextTabs\": [], \"viewSettings\": {\"placeHolder\": \"Example: 1 + 1, or press CTRL + space\"}, \"statementsList\": [\"save_knn_model(knn)\\nsave_als_model(als)\\n\"], \"lastAceSelectionRowOffset\": 0, \"executingBlockingOperation\": null, \"errorsKlass\": \"results pyspark alert alert-error\", \"statement\": \"save_knn_model(knn)\\nsave_als_model(als)\\n\", \"type\": \"pyspark\", \"chartSorting\": \"none\", \"previousChartOptions\": {\"chartTimelineType\": \"bar\", \"chartSorting\": \"none\", \"chartLimit\": null, \"chartMapHeat\": null, \"chartX\": \"Header\", \"chartMapType\": \"marker\", \"chartYMulti\": [], \"chartScatterSize\": null, \"chartScope\": \"world\", \"chartMapLabel\": null, \"chartScatterGroup\": null, \"chartYSingle\": null, \"chartXPivot\": null}, \"aceWarningsHolder\": [], \"resultsKlass\": \"results pyspark\", \"chartTimelineType\": \"bar\", \"compatibilityTargetPlatforms\": [{\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}], \"topRisk\": null, \"hasCurlyBracketParameters\": true, \"chartScatterGroup\": null, \"settingsVisible\": false, \"queriesFilterVisible\": false, \"aceWarnings\": [], \"compatibilityCheckRunning\": false, \"isLoading\": true, \"loadingQueries\": false, \"hasDataForChart\": false, \"id\": \"d97c3995-5611-abc8-8e8d-6081a882b005\", \"aceSize\": 100, \"chartData\": [], \"queriesHasErrors\": false, \"chartMapLabel\": null, \"status\": \"loading\", \"chartMapType\": \"marker\", \"queriesFilter\": \"\", \"queriesCurrentPage\": 1, \"isBatchable\": false, \"chartYMulti\": [], \"dbSelectionVisible\": false, \"database\": \"default\", \"hasSuggestion\": null, \"chartXPivot\": null, \"checkStatusTimeout\": null}, {\"wasBatchExecuted\": false, \"chartLimits\": [5, 10, 25, 50, 100], \"associatedDocumentLoading\": true, \"isReady\": false, \"statement_raw\": \"\", \"statusForButtons\": \"executed\", \"showLogs\": false, \"variableNames\": [], \"associatedDocumentUuid\": null, \"compatibilitySourcePlatform\": \"pyspark\", \"chartLimit\": null, \"progress\": 0, \"chartType\": \"bars\", \"isFetchingData\": false, \"name\": \"\", \"statementTypes\": [\"text\", \"file\", \"document\"], \"is_redacted\": false, \"currentQueryTab\": \"queryHistory\", \"chartScope\": \"world\", \"result\": {\"statement_id\": 0, \"isMetaFilterVisible\": false, \"meta\": [], \"logLines\": 0, \"id\": \"36825d22-423b-db53-4ca5-9f81ffa0a993\", \"logs\": \"\", \"statements_count\": 1, \"rows\": null, \"hasSomeResults\": false, \"filteredMetaChecked\": true, \"hasMore\": false, \"filteredMeta\": [], \"type\": \"table\", \"handle\": {}, \"metaFilter\": \"\", \"explanation\": \"\", \"statement_range\": {\"start\": {\"column\": 0, \"row\": 0}, \"end\": {\"column\": 0, \"row\": 0}}, \"startTime\": \"2021-06-14T07:15:52.233Z\", \"data\": [], \"previous_statement_hash\": null, \"executionTime\": 0, \"fetchedOnce\": false, \"hasResultset\": true, \"endTime\": \"2021-06-14T07:15:52.233Z\"}, \"errors\": [], \"chartMapHeat\": null, \"compatibilitySourcePlatforms\": [{\"name\": \"Teradata\", \"value\": \"teradata\"}, {\"name\": \"Oracle\", \"value\": \"oracle\"}, {\"name\": \"Netezza\", \"value\": \"netezza\"}, {\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}, {\"name\": \"DB2\", \"value\": \"db2\"}, {\"name\": \"Greenplum\", \"value\": \"greenplum\"}, {\"name\": \"MySQL\", \"value\": \"mysql\"}, {\"name\": \"PostgreSQL\", \"value\": \"postgresql\"}, {\"name\": \"Informix\", \"value\": \"informix\"}, {\"name\": \"SQL Server\", \"value\": \"sqlserver\"}, {\"name\": \"Sybase\", \"value\": \"sybase\"}, {\"name\": \"Access\", \"value\": \"access\"}, {\"name\": \"Firebird\", \"value\": \"firebird\"}, {\"name\": \"ANSISQL\", \"value\": \"ansisql\"}, {\"name\": \"Generic\", \"value\": \"generic\"}], \"aceErrorsHolder\": [], \"showOptimizer\": false, \"compatibilityTargetPlatform\": \"pyspark\", \"jobs\": [], \"statementType\": \"text\", \"variableValues\": {}, \"isCanceling\": false, \"queriesTotalPages\": 0, \"formatEnabled\": true, \"properties\": {}, \"aceErrors\": [], \"externalStatementLoaded\": false, \"chartScatterSize\": null, \"chartYSingle\": null, \"suggestion\": \"\", \"statementPath\": \"\", \"showLongOperationWarning\": false, \"chartX\": null, \"lastExecuted\": 0, \"variables\": [], \"showChart\": false, \"isResultSettingsVisible\": false, \"showGrid\": true, \"pinnedContextTabs\": [], \"viewSettings\": {\"placeHolder\": \"Example: 1 + 1, or press CTRL + space\"}, \"statementsList\": [], \"lastAceSelectionRowOffset\": 0, \"executingBlockingOperation\": null, \"errorsKlass\": \"results pyspark alert alert-error\", \"statement\": \"\", \"type\": \"pyspark\", \"chartSorting\": \"none\", \"previousChartOptions\": {\"chartTimelineType\": \"bar\", \"chartSorting\": \"none\", \"chartLimit\": null, \"chartMapHeat\": null, \"chartX\": null, \"chartMapType\": \"marker\", \"chartYMulti\": [], \"chartScatterSize\": null, \"chartScope\": \"world\", \"chartMapLabel\": null, \"chartScatterGroup\": null, \"chartYSingle\": null, \"chartXPivot\": null}, \"aceWarningsHolder\": [], \"resultsKlass\": \"results pyspark\", \"chartTimelineType\": \"bar\", \"compatibilityTargetPlatforms\": [{\"name\": \"Impala\", \"value\": \"impala\"}, {\"name\": \"Hive\", \"value\": \"hive\"}], \"topRisk\": null, \"hasCurlyBracketParameters\": true, \"chartScatterGroup\": null, \"settingsVisible\": false, \"queriesFilterVisible\": false, \"aceWarnings\": [], \"compatibilityCheckRunning\": false, \"isLoading\": true, \"loadingQueries\": false, \"hasDataForChart\": false, \"id\": \"5fa618d2-695e-21af-cde3-76a455b2807e\", \"aceSize\": 100, \"chartData\": [], \"queriesHasErrors\": false, \"chartMapLabel\": null, \"status\": \"loading\", \"chartMapType\": \"marker\", \"queriesFilter\": \"\", \"queriesCurrentPage\": 1, \"isBatchable\": false, \"chartYMulti\": [], \"dbSelectionVisible\": false, \"database\": \"default\", \"hasSuggestion\": null, \"chartXPivot\": null, \"checkStatusTimeout\": null}], \"isHistory\": false, \"type\": \"notebook\", \"historyFilter\": \"\", \"description\": \"\", \"sessions\": [{\"type\": \"pyspark\", \"properties\": [{\"multiple\": true, \"name\": \"conf\", \"defaultValue\": [], \"value\": [], \"nice_name\": \"Spark Conf\", \"help_text\": \"Add one or more Spark conf properties to the session.\", \"type\": \"settings\", \"is_yarn\": false}, {\"multiple\": true, \"name\": \"jars\", \"defaultValue\": [], \"value\": [], \"nice_name\": \"Jars\", \"help_text\": \"Add one or more JAR files to the list of resources.\", \"type\": \"csv-hdfs-files\", \"is_yarn\": false}, {\"multiple\": true, \"name\": \"files\", \"defaultValue\": [], \"value\": [], \"nice_name\": \"Files\", \"help_text\": \"Files to be placed in the working directory of each executor.\", \"type\": \"csv-hdfs-files\", \"is_yarn\": false}, {\"multiple\": true, \"name\": \"pyFiles\", \"defaultValue\": [], \"value\": [], \"nice_name\": \"pyFiles\", \"help_text\": \"Python files to be placed in the working directory of each executor.\", \"type\": \"csv-hdfs-files\", \"is_yarn\": false}, {\"multiple\": false, \"name\": \"driverMemory\", \"defaultValue\": \"1G\", \"value\": \"1G\", \"nice_name\": \"Driver Memory\", \"help_text\": \"Amount of memory to use for the driver process in GB. (Default: 1). \", \"type\": \"jvm\", \"is_yarn\": false}, {\"multiple\": false, \"name\": \"driverCores\", \"defaultValue\": 1, \"value\": 1, \"nice_name\": \"Driver Cores\", \"help_text\": \"Number of cores used by the driver, only in cluster mode (Default: 1)\", \"type\": \"number\", \"is_yarn\": true}, {\"multiple\": false, \"name\": \"executorMemory\", \"defaultValue\": \"1G\", \"value\": \"1G\", \"nice_name\": \"Executor Memory\", \"help_text\": \"Amount of memory to use per executor process in GB. (Default: 1)\", \"type\": \"jvm\", \"is_yarn\": true}, {\"multiple\": false, \"name\": \"executorCores\", \"defaultValue\": 1, \"value\": 1, \"nice_name\": \"Executor Cores\", \"help_text\": \"Number of cores used by the driver, only in cluster mode (Default: 1)\", \"type\": \"number\", \"is_yarn\": true}, {\"multiple\": false, \"name\": \"queue\", \"defaultValue\": \"default\", \"value\": \"default\", \"nice_name\": \"Queue\", \"help_text\": \"The YARN queue to submit to, only in cluster mode (Default: default)\", \"type\": \"string\", \"is_yarn\": true}, {\"multiple\": true, \"name\": \"archives\", \"defaultValue\": [], \"value\": [], \"nice_name\": \"Archives\", \"help_text\": \"Archives to be extracted into the working directory of each executor, only in cluster mode.\", \"type\": \"csv-hdfs-files\", \"is_yarn\": true}], \"id\": 0}], \"updateHistoryFailed\": false, \"presentationSnippets\": {}, \"isBatchable\": false, \"selectedSnippet\": \"pyspark\", \"coordinatorUuid\": null, \"name\": \"IA : 2\", \"isManaged\": false, \"loadingScheduler\": false, \"viewSchedulerId\": \"\", \"isSaved\": true, \"historyCurrentPage\": 1, \"creatingSessionLocks\": [\"pyspark\"], \"directoryUuid\": \"\", \"parentSavedQueryUuid\": null, \"dependentsCoordinator\": []}", 
    "is_trashed": false, 
    "name": "IA : 2"
  }
}
]
